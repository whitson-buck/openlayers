{
  "version": 3,
  "sources": ["../../ol/geom/Circle.js", "../../ol/interaction/Draw.js", "dep:ol_interaction_Draw"],
  "sourcesContent": ["/**\n * @module ol/geom/Circle\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {createOrUpdate, forEachCorner, intersects} from '../extent.js';\nimport {deflateCoordinate} from './flat/deflate.js';\nimport {rotate, translate} from './flat/transform.js';\n\n/**\n * @classdesc\n * Circle geometry.\n *\n * @api\n */\nclass Circle extends SimpleGeometry {\n  /**\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   *     For internal use, flat coordinates in combination with `layout` and no\n   *     `radius` are also accepted.\n   * @param {number} [radius] Radius.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(center, radius, layout) {\n    super();\n    if (layout !== undefined && radius === undefined) {\n      this.setFlatCoordinates(layout, center);\n    } else {\n      radius = radius ? radius : 0;\n      this.setCenterAndRadius(center, radius, layout);\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Circle} Clone.\n   * @api\n   */\n  clone() {\n    const circle = new Circle(\n      this.flatCoordinates.slice(),\n      undefined,\n      this.layout\n    );\n    circle.applyProperties(this);\n    return circle;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const dx = x - flatCoordinates[0];\n    const dy = y - flatCoordinates[1];\n    const squaredDistance = dx * dx + dy * dy;\n    if (squaredDistance < minSquaredDistance) {\n      if (squaredDistance === 0) {\n        for (let i = 0; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      } else {\n        const delta = this.getRadius() / Math.sqrt(squaredDistance);\n        closestPoint[0] = flatCoordinates[0] + delta * dx;\n        closestPoint[1] = flatCoordinates[1] + delta * dy;\n        for (let i = 2; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      }\n      closestPoint.length = this.stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const flatCoordinates = this.flatCoordinates;\n    const dx = x - flatCoordinates[0];\n    const dy = y - flatCoordinates[1];\n    return dx * dx + dy * dy <= this.getRadiusSquared_();\n  }\n\n  /**\n   * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @return {import(\"../coordinate.js\").Coordinate} Center.\n   * @api\n   */\n  getCenter() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const radius = flatCoordinates[this.stride] - flatCoordinates[0];\n    return createOrUpdate(\n      flatCoordinates[0] - radius,\n      flatCoordinates[1] - radius,\n      flatCoordinates[0] + radius,\n      flatCoordinates[1] + radius,\n      extent\n    );\n  }\n\n  /**\n   * Return the radius of the circle.\n   * @return {number} Radius.\n   * @api\n   */\n  getRadius() {\n    return Math.sqrt(this.getRadiusSquared_());\n  }\n\n  /**\n   * @private\n   * @return {number} Radius squared.\n   */\n  getRadiusSquared_() {\n    const dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];\n    const dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];\n    return dx * dx + dy * dy;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Circle';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const circleExtent = this.getExtent();\n    if (intersects(extent, circleExtent)) {\n      const center = this.getCenter();\n\n      if (extent[0] <= center[0] && extent[2] >= center[0]) {\n        return true;\n      }\n      if (extent[1] <= center[1] && extent[3] >= center[1]) {\n        return true;\n      }\n\n      return forEachCorner(extent, this.intersectsCoordinate.bind(this));\n    }\n    return false;\n  }\n\n  /**\n   * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\n   * @api\n   */\n  setCenter(center) {\n    const stride = this.stride;\n    const radius = this.flatCoordinates[stride] - this.flatCoordinates[0];\n    const flatCoordinates = center.slice();\n    flatCoordinates[stride] = flatCoordinates[0] + radius;\n    for (let i = 1; i < stride; ++i) {\n      flatCoordinates[stride + i] = center[i];\n    }\n    this.setFlatCoordinates(this.layout, flatCoordinates);\n    this.changed();\n  }\n\n  /**\n   * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as\n   * number) of the circle.\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   * @param {number} radius Radius.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCenterAndRadius(center, radius, layout) {\n    this.setLayout(layout, center, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    /** @type {Array<number>} */\n    const flatCoordinates = this.flatCoordinates;\n    let offset = deflateCoordinate(flatCoordinates, 0, center, this.stride);\n    flatCoordinates[offset++] = flatCoordinates[0] + radius;\n    for (let i = 1, ii = this.stride; i < ii; ++i) {\n      flatCoordinates[offset++] = flatCoordinates[i];\n    }\n    flatCoordinates.length = offset;\n    this.changed();\n  }\n\n  getCoordinates() {\n    return null;\n  }\n\n  setCoordinates(coordinates, layout) {}\n\n  /**\n   * Set the radius of the circle. The radius is in the units of the projection.\n   * @param {number} radius Radius.\n   * @api\n   */\n  setRadius(radius) {\n    this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;\n    this.changed();\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const center = this.getCenter();\n    const stride = this.getStride();\n    this.setCenter(\n      rotate(center, 0, center.length, stride, angle, anchor, center)\n    );\n    this.changed();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const center = this.getCenter();\n    const stride = this.getStride();\n    this.setCenter(\n      translate(center, 0, center.length, stride, deltaX, deltaY, center)\n    );\n    this.changed();\n  }\n}\n\n/**\n * Transform each coordinate of the circle from one coordinate reference system\n * to another. The geometry is modified in place.\n * If you do not want the geometry modified in place, first clone() it and\n * then use this function on the clone.\n *\n * Internally a circle is currently represented by two points: the center of\n * the circle `[cx, cy]`, and the point to the right of the circle\n * `[cx + r, cy]`. This `transform` function just transforms these two points.\n * So the resulting geometry is also a circle, and that circle does not\n * correspond to the shape that would be obtained by transforming every point\n * of the original circle.\n *\n * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @return {Circle} This geometry.  Note that original geometry is\n *     modified in place.\n * @function\n * @api\n */\nCircle.prototype.transform;\nexport default Circle;\n", "/**\n * @module ol/interaction/Draw\n */\nimport Circle from '../geom/Circle.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport InteractionProperty from './Property.js';\nimport LineString from '../geom/LineString.js';\nimport MapBrowserEvent from '../MapBrowserEvent.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport Polygon, {fromCircle, makeRegular} from '../geom/Polygon.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {FALSE, TRUE} from '../functions.js';\nimport {always, noModifierKeys, shiftKeyOnly} from '../events/condition.js';\nimport {\n  boundingExtent,\n  getBottomLeft,\n  getBottomRight,\n  getTopLeft,\n  getTopRight,\n} from '../extent.js';\nimport {createEditingStyle} from '../style/Style.js';\nimport {fromUserCoordinate, getUserProjection} from '../proj.js';\nimport {getStrideForLayout} from '../geom/SimpleGeometry.js';\nimport {squaredDistance as squaredCoordinateDistance} from '../coordinate.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../geom/Geometry.js\").Type} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish. Must be greater than `0`.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished. Not used when drawing\n * POINT or MULTI_POINT geometries.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style for sketch features.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition.noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition.shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {import(\"../geom/Geometry.js\").GeometryLayout} [geometryLayout='XY'] Layout of the\n * feature geometries created by the draw interaction.\n */\n\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n\n/**\n * Function that takes an array of coordinates and an optional existing geometry\n * and a projection as arguments, and returns a geometry. The optional existing\n * geometry is the geometry that is returned when the function is called without\n * a second argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default,\n *     import(\"../proj/Projection.js\").default):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n\n/**\n * @typedef {'Point' | 'LineString' | 'Polygon' | 'Circle'} Mode\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n */\n\n/**\n * @enum {string}\n */\nconst DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n  /**\n   * Triggered upon feature draw end\n   * @event DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend',\n  /**\n   * Triggered upon feature draw abortion\n   * @event DrawEvent#drawabort\n   * @api\n   */\n  DRAWABORT: 'drawabort',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\nexport class DrawEvent extends Event {\n  /**\n   * @param {DrawEventType} type Type.\n   * @param {Feature} feature The feature drawn.\n   */\n  constructor(type, feature) {\n    super(type);\n\n    /**\n     * The feature being drawn.\n     * @type {Feature}\n     * @api\n     */\n    this.feature = feature;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'drawabort'|'drawend'|'drawstart', DrawEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'drawabort'|'drawend'|'drawstart', Return>} DrawOnSignature\n */\n\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\nclass Draw extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (\n      options\n    );\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /***\n     * @type {DrawOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {DrawOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {DrawOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.shouldHandle_ = false;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.downPx_ = null;\n\n    /**\n     * @type {?}\n     * @private\n     */\n    this.downTimeout_;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.lastDragTime_;\n\n    /**\n     * Pointer type of the last pointermove event\n     * @type {string}\n     * @private\n     */\n    this.pointerType_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.freehand_ = false;\n\n    /**\n     * Target source for drawn features.\n     * @type {VectorSource|null}\n     * @private\n     */\n    this.source_ = options.source ? options.source : null;\n\n    /**\n     * Target collection for drawn features.\n     * @type {import(\"../Collection.js\").default<Feature>|null}\n     * @private\n     */\n    this.features_ = options.features ? options.features : null;\n\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n    this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n\n    /**\n     * Geometry type.\n     * @type {import(\"../geom/Geometry.js\").Type}\n     * @private\n     */\n    this.type_ = /** @type {import(\"../geom/Geometry.js\").Type} */ (\n      options.type\n    );\n\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {Mode}\n     * @private\n     */\n    this.mode_ = getMode(this.type_);\n\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n    this.stopClick_ = !!options.stopClick;\n\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n    this.minPoints_ = options.minPoints\n      ? options.minPoints\n      : this.mode_ === 'Polygon'\n      ? 3\n      : 2;\n\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n    this.maxPoints_ =\n      this.mode_ === 'Circle'\n        ? 2\n        : options.maxPoints\n        ? options.maxPoints\n        : Infinity;\n\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.finishCondition_ = options.finishCondition\n      ? options.finishCondition\n      : TRUE;\n\n    /**\n     * @private\n     * @type {import(\"../geom/Geometry.js\").GeometryLayout}\n     */\n    this.geometryLayout_ = options.geometryLayout\n      ? options.geometryLayout\n      : 'XY';\n\n    let geometryFunction = options.geometryFunction;\n    if (!geometryFunction) {\n      const mode = this.mode_;\n      if (mode === 'Circle') {\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, geometry, projection) {\n          const circle = geometry\n            ? /** @type {Circle} */ (geometry)\n            : new Circle([NaN, NaN]);\n          const center = fromUserCoordinate(coordinates[0], projection);\n          const squaredLength = squaredCoordinateDistance(\n            center,\n            fromUserCoordinate(coordinates[coordinates.length - 1], projection)\n          );\n          circle.setCenterAndRadius(\n            center,\n            Math.sqrt(squaredLength),\n            this.geometryLayout_\n          );\n          const userProjection = getUserProjection();\n          if (userProjection) {\n            circle.transform(projection, userProjection);\n          }\n          return circle;\n        };\n      } else {\n        let Constructor;\n        if (mode === 'Point') {\n          Constructor = Point;\n        } else if (mode === 'LineString') {\n          Constructor = LineString;\n        } else if (mode === 'Polygon') {\n          Constructor = Polygon;\n        }\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, geometry, projection) {\n          if (geometry) {\n            if (mode === 'Polygon') {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates(\n                  [coordinates[0].concat([coordinates[0][0]])],\n                  this.geometryLayout_\n                );\n              } else {\n                geometry.setCoordinates([], this.geometryLayout_);\n              }\n            } else {\n              geometry.setCoordinates(coordinates, this.geometryLayout_);\n            }\n          } else {\n            geometry = new Constructor(coordinates, this.geometryLayout_);\n          }\n          return geometry;\n        };\n      }\n    }\n\n    /**\n     * @type {GeometryFunction}\n     * @private\n     */\n    this.geometryFunction_ = geometryFunction;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.dragVertexDelay_ =\n      options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.finishCoordinate_ = null;\n\n    /**\n     * Sketch feature.\n     * @type {Feature<import('../geom/SimpleGeometry.js').default>}\n     * @private\n     */\n    this.sketchFeature_ = null;\n\n    /**\n     * Sketch point.\n     * @type {Feature<Point>}\n     * @private\n     */\n    this.sketchPoint_ = null;\n\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {SketchCoordType}\n     * @private\n     */\n    this.sketchCoords_ = null;\n\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {Feature<LineString>}\n     * @private\n     */\n    this.sketchLine_ = null;\n\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {LineCoordType}\n     * @private\n     */\n    this.sketchLineCoords_ = null;\n\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n    this.squaredClickTolerance_ = options.clickTolerance\n      ? options.clickTolerance * options.clickTolerance\n      : 36;\n\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false,\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileInteracting: true,\n    });\n\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : noModifierKeys;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.freehandCondition_;\n    if (options.freehand) {\n      this.freehandCondition_ = always;\n    } else {\n      this.freehandCondition_ = options.freehandCondition\n        ? options.freehandCondition\n        : shiftKeyOnly;\n    }\n\n    this.addChangeListener(InteractionProperty.ACTIVE, this.updateState_);\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default} map Map.\n   */\n  setMap(map) {\n    super.setMap(map);\n    this.updateState_();\n  }\n\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  getOverlay() {\n    return this.overlay_;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  handleEvent(event) {\n    if (event.originalEvent.type === EventType.CONTEXTMENU) {\n      // Avoid context menu for long taps when drawing on mobile\n      event.originalEvent.preventDefault();\n    }\n    this.freehand_ = this.mode_ !== 'Point' && this.freehandCondition_(event);\n    let move = event.type === MapBrowserEventType.POINTERMOVE;\n    let pass = true;\n    if (\n      !this.freehand_ &&\n      this.lastDragTime_ &&\n      event.type === MapBrowserEventType.POINTERDRAG\n    ) {\n      const now = Date.now();\n      if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n        this.downPx_ = event.pixel;\n        this.shouldHandle_ = !this.freehand_;\n        move = true;\n      } else {\n        this.lastDragTime_ = undefined;\n      }\n      if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n    }\n    if (\n      this.freehand_ &&\n      event.type === MapBrowserEventType.POINTERDRAG &&\n      this.sketchFeature_ !== null\n    ) {\n      this.addToDrawing_(event.coordinate);\n      pass = false;\n    } else if (\n      this.freehand_ &&\n      event.type === MapBrowserEventType.POINTERDOWN\n    ) {\n      pass = false;\n    } else if (move && this.getPointerCount() < 2) {\n      pass = event.type === MapBrowserEventType.POINTERMOVE;\n      if (pass && this.freehand_) {\n        this.handlePointerMove_(event);\n        if (this.shouldHandle_) {\n          // Avoid page scrolling when freehand drawing on mobile\n          event.originalEvent.preventDefault();\n        }\n      } else if (\n        event.originalEvent.pointerType === 'mouse' ||\n        (event.type === MapBrowserEventType.POINTERDRAG &&\n          this.downTimeout_ === undefined)\n      ) {\n        this.handlePointerMove_(event);\n      }\n    } else if (event.type === MapBrowserEventType.DBLCLICK) {\n      pass = false;\n    }\n\n    return super.handleEvent(event) && pass;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(event) {\n    this.shouldHandle_ = !this.freehand_;\n\n    if (this.freehand_) {\n      this.downPx_ = event.pixel;\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event.coordinate);\n      }\n      return true;\n    } else if (this.condition_(event)) {\n      this.lastDragTime_ = Date.now();\n      this.downTimeout_ = setTimeout(\n        function () {\n          this.handlePointerMove_(\n            new MapBrowserEvent(\n              MapBrowserEventType.POINTERMOVE,\n              event.map,\n              event.originalEvent,\n              false,\n              event.frameState\n            )\n          );\n        }.bind(this),\n        this.dragVertexDelay_\n      );\n      this.downPx_ = event.pixel;\n      return true;\n    } else {\n      this.lastDragTime_ = undefined;\n      return false;\n    }\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(event) {\n    let pass = true;\n\n    if (this.getPointerCount() === 0) {\n      if (this.downTimeout_) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n\n      this.handlePointerMove_(event);\n\n      if (this.shouldHandle_) {\n        const startingToDraw = !this.finishCoordinate_;\n        if (startingToDraw) {\n          this.startDrawing_(event.coordinate);\n        }\n        if (!startingToDraw && this.freehand_) {\n          this.finishDrawing();\n        } else if (\n          !this.freehand_ &&\n          (!startingToDraw || this.mode_ === 'Point')\n        ) {\n          if (this.atFinish_(event.pixel)) {\n            if (this.finishCondition_(event)) {\n              this.finishDrawing();\n            }\n          } else {\n            this.addToDrawing_(event.coordinate);\n          }\n        }\n        pass = false;\n      } else if (this.freehand_) {\n        this.abortDrawing();\n      }\n    }\n\n    if (!pass && this.stopClick_) {\n      event.preventDefault();\n    }\n    return pass;\n  }\n\n  /**\n   * Handle move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n   * @private\n   */\n  handlePointerMove_(event) {\n    this.pointerType_ = event.originalEvent.pointerType;\n    if (\n      this.downPx_ &&\n      ((!this.freehand_ && this.shouldHandle_) ||\n        (this.freehand_ && !this.shouldHandle_))\n    ) {\n      const downPx = this.downPx_;\n      const clickPx = event.pixel;\n      const dx = downPx[0] - clickPx[0];\n      const dy = downPx[1] - clickPx[1];\n      const squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_\n        ? squaredDistance > this.squaredClickTolerance_\n        : squaredDistance <= this.squaredClickTolerance_;\n      if (!this.shouldHandle_) {\n        return;\n      }\n    }\n\n    if (this.finishCoordinate_) {\n      this.modifyDrawing_(event.coordinate);\n    } else {\n      this.createOrUpdateSketchPoint_(event.coordinate.slice());\n    }\n  }\n\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n  atFinish_(pixel) {\n    let at = false;\n    if (this.sketchFeature_) {\n      let potentiallyDone = false;\n      let potentiallyFinishCoordinates = [this.finishCoordinate_];\n      const mode = this.mode_;\n      if (mode === 'Point') {\n        at = true;\n      } else if (mode === 'Circle') {\n        at = this.sketchCoords_.length === 2;\n      } else if (mode === 'LineString') {\n        potentiallyDone = this.sketchCoords_.length > this.minPoints_;\n      } else if (mode === 'Polygon') {\n        const sketchCoords = /** @type {PolyCoordType} */ (this.sketchCoords_);\n        potentiallyDone = sketchCoords[0].length > this.minPoints_;\n        potentiallyFinishCoordinates = [\n          sketchCoords[0][0],\n          sketchCoords[0][sketchCoords[0].length - 2],\n        ];\n      }\n      if (potentiallyDone) {\n        const map = this.getMap();\n        for (let i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          const finishCoordinate = potentiallyFinishCoordinates[i];\n          const finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          const dx = pixel[0] - finishPixel[0];\n          const dy = pixel[1] - finishPixel[1];\n          const snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n          if (at) {\n            this.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n    return at;\n  }\n\n  /**\n   * @param {import(\"../coordinate\").Coordinate} coordinates Coordinate.\n   * @private\n   */\n  createOrUpdateSketchPoint_(coordinates) {\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      const sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  }\n\n  /**\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n   * @private\n   */\n  createOrUpdateCustomSketchLine_(geometry) {\n    if (!this.sketchLine_) {\n      this.sketchLine_ = new Feature();\n    }\n    const ring = geometry.getLinearRing(0);\n    let sketchLineGeom = this.sketchLine_.getGeometry();\n    if (!sketchLineGeom) {\n      sketchLineGeom = new LineString(\n        ring.getFlatCoordinates(),\n        ring.getLayout()\n      );\n      this.sketchLine_.setGeometry(sketchLineGeom);\n    } else {\n      sketchLineGeom.setFlatCoordinates(\n        ring.getLayout(),\n        ring.getFlatCoordinates()\n      );\n      sketchLineGeom.changed();\n    }\n  }\n\n  /**\n   * Start the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} start Start coordinate.\n   * @private\n   */\n  startDrawing_(start) {\n    const projection = this.getMap().getView().getProjection();\n    const stride = getStrideForLayout(this.geometryLayout_);\n    while (start.length < stride) {\n      start.push(0);\n    }\n    this.finishCoordinate_ = start;\n    if (this.mode_ === 'Point') {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === 'Polygon') {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(new LineString(this.sketchLineCoords_));\n    }\n    const geometry = this.geometryFunction_(\n      this.sketchCoords_,\n      undefined,\n      projection\n    );\n    this.sketchFeature_ = new Feature();\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(\n      new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_)\n    );\n  }\n\n  /**\n   * Modify the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @private\n   */\n  modifyDrawing_(coordinate) {\n    const map = this.getMap();\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = map.getView().getProjection();\n    const stride = getStrideForLayout(this.geometryLayout_);\n    let coordinates, last;\n    while (coordinate.length < stride) {\n      coordinate.push(0);\n    }\n    if (this.mode_ === 'Point') {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === 'Polygon') {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      last = coordinates[coordinates.length - 1];\n      if (this.atFinish_(map.getPixelFromCoordinate(coordinate))) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_(\n      /** @type {!LineCoordType} */ (this.sketchCoords_),\n      geometry,\n      projection\n    );\n    if (this.sketchPoint_) {\n      const sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n    if (geometry.getType() === 'Polygon' && this.mode_ !== 'Polygon') {\n      this.createOrUpdateCustomSketchLine_(/** @type {Polygon} */ (geometry));\n    } else if (this.sketchLineCoords_) {\n      const sketchLineGeom = this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n    this.updateSketchFeatures_();\n  }\n\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {!PointCoordType} coordinate Coordinate\n   * @private\n   */\n  addToDrawing_(coordinate) {\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    let done;\n    let coordinates;\n    const mode = this.mode_;\n    if (mode === 'LineString' || mode === 'Circle') {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (mode === 'Polygon') {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n    this.createOrUpdateSketchPoint_(coordinate.slice());\n    this.updateSketchFeatures_();\n    if (done) {\n      this.finishDrawing();\n    }\n  }\n\n  /**\n   * Remove last point of the feature currently being drawn. Does not do anything when\n   * drawing POINT or MULTI_POINT geometries.\n   * @api\n   */\n  removeLastPoint() {\n    if (!this.sketchFeature_) {\n      return;\n    }\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    let coordinates;\n    const mode = this.mode_;\n    if (mode === 'LineString' || mode === 'Circle') {\n      coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n      coordinates.splice(-2, 1);\n      if (coordinates.length >= 2) {\n        this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n        const finishCoordinate = this.finishCoordinate_.slice();\n        coordinates[coordinates.length - 1] = finishCoordinate;\n        this.createOrUpdateSketchPoint_(finishCoordinate);\n      }\n      this.geometryFunction_(coordinates, geometry, projection);\n      if (geometry.getType() === 'Polygon' && this.sketchLine_) {\n        this.createOrUpdateCustomSketchLine_(/** @type {Polygon} */ (geometry));\n      }\n    } else if (mode === 'Polygon') {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      coordinates.splice(-2, 1);\n      const sketchLineGeom = this.sketchLine_.getGeometry();\n      if (coordinates.length >= 2) {\n        const finishCoordinate = coordinates[coordinates.length - 2].slice();\n        coordinates[coordinates.length - 1] = finishCoordinate;\n        this.createOrUpdateSketchPoint_(finishCoordinate);\n      }\n      sketchLineGeom.setCoordinates(coordinates);\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n\n    if (coordinates.length === 1) {\n      this.abortDrawing();\n    }\n\n    this.updateSketchFeatures_();\n  }\n\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @api\n   */\n  finishDrawing() {\n    const sketchFeature = this.abortDrawing_();\n    if (!sketchFeature) {\n      return;\n    }\n    let coordinates = this.sketchCoords_;\n    const geometry = sketchFeature.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    if (this.mode_ === 'LineString') {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (this.mode_ === 'Polygon') {\n      // remove the redundant last point in ring\n      /** @type {PolyCoordType} */ (coordinates)[0].pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n      coordinates = geometry.getCoordinates();\n    }\n\n    // cast multi-part geometries\n    if (this.type_ === 'MultiPoint') {\n      sketchFeature.setGeometry(\n        new MultiPoint([/** @type {PointCoordType} */ (coordinates)])\n      );\n    } else if (this.type_ === 'MultiLineString') {\n      sketchFeature.setGeometry(\n        new MultiLineString([/** @type {LineCoordType} */ (coordinates)])\n      );\n    } else if (this.type_ === 'MultiPolygon') {\n      sketchFeature.setGeometry(\n        new MultiPolygon([/** @type {PolyCoordType} */ (coordinates)])\n      );\n    }\n\n    // First dispatch event to allow full set up of feature\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));\n\n    // Then insert feature\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n  }\n\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {Feature<import(\"../geom/SimpleGeometry.js\").default>|null} The sketch feature (or null if none).\n   * @private\n   */\n  abortDrawing_() {\n    this.finishCoordinate_ = null;\n    const sketchFeature = this.sketchFeature_;\n    this.sketchFeature_ = null;\n    this.sketchPoint_ = null;\n    this.sketchLine_ = null;\n    this.overlay_.getSource().clear(true);\n    return sketchFeature;\n  }\n\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @api\n   */\n  abortDrawing() {\n    const sketchFeature = this.abortDrawing_();\n    if (sketchFeature) {\n      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWABORT, sketchFeature));\n    }\n  }\n\n  /**\n   * Append coordinates to the end of the geometry that is currently being drawn.\n   * This can be used when drawing LineStrings or Polygons. Coordinates will\n   * either be appended to the current LineString or the outer ring of the current\n   * Polygon. If no geometry is being drawn, a new one will be created.\n   * @param {!LineCoordType} coordinates Linear coordinates to be appended to\n   * the coordinate array.\n   * @api\n   */\n  appendCoordinates(coordinates) {\n    const mode = this.mode_;\n    const newDrawing = !this.sketchFeature_;\n    if (newDrawing) {\n      this.startDrawing_(coordinates[0]);\n    }\n    /** @type {LineCoordType} */\n    let sketchCoords;\n    if (mode === 'LineString' || mode === 'Circle') {\n      sketchCoords = /** @type {LineCoordType} */ (this.sketchCoords_);\n    } else if (mode === 'Polygon') {\n      sketchCoords =\n        this.sketchCoords_ && this.sketchCoords_.length\n          ? /** @type {PolyCoordType} */ (this.sketchCoords_)[0]\n          : [];\n    } else {\n      return;\n    }\n\n    if (newDrawing) {\n      sketchCoords.shift();\n    }\n\n    // Remove last coordinate from sketch drawing (this coordinate follows cursor position)\n    sketchCoords.pop();\n\n    // Append coordinate list\n    for (let i = 0; i < coordinates.length; i++) {\n      this.addToDrawing_(coordinates[i]);\n    }\n\n    const ending = coordinates[coordinates.length - 1];\n    // Duplicate last coordinate for sketch drawing (cursor position)\n    this.addToDrawing_(ending);\n    this.modifyDrawing_(ending);\n  }\n\n  /**\n   * Initiate draw mode by starting from an existing geometry which will\n   * receive new additional points. This only works on features with\n   * `LineString` geometries, where the interaction will extend lines by adding\n   * points to the end of the coordinates array.\n   * This will change the original feature, instead of drawing a copy.\n   *\n   * The function will dispatch a `drawstart` event.\n   *\n   * @param {!Feature<LineString>} feature Feature to be extended.\n   * @api\n   */\n  extend(feature) {\n    const geometry = feature.getGeometry();\n    const lineString = geometry;\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    const last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.sketchPoint_ = new Feature(new Point(last));\n    this.updateSketchFeatures_();\n    this.dispatchEvent(\n      new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_)\n    );\n  }\n\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n  updateSketchFeatures_() {\n    const sketchFeatures = [];\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n    const overlaySource = this.overlay_.getSource();\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  }\n\n  /**\n   * @private\n   */\n  updateState_() {\n    const map = this.getMap();\n    const active = this.getActive();\n    if (!map || !active) {\n      this.abortDrawing();\n    }\n    this.overlay_.setMap(active ? map : null);\n  }\n}\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  const styles = createEditingStyle();\n  return function (feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of a\n * {@link import(\"../geom/Circle.js\").Circle} geometry.\n * @param {number} [sides] Number of sides of the regular polygon.\n *     Default is 32.\n * @param {number} [angle] Angle of the first point in counter-clockwise\n *     radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a polygon.\n * @api\n */\nexport function createRegularPolygon(sides, angle) {\n  return function (coordinates, geometry, projection) {\n    const center = fromUserCoordinate(\n      /** @type {LineCoordType} */ (coordinates)[0],\n      projection\n    );\n    const end = fromUserCoordinate(\n      /** @type {LineCoordType} */ (coordinates)[coordinates.length - 1],\n      projection\n    );\n    const radius = Math.sqrt(squaredCoordinateDistance(center, end));\n    geometry = geometry || fromCircle(new Circle(center), sides);\n\n    let internalAngle = angle;\n    if (!angle && angle !== 0) {\n      const x = end[0] - center[0];\n      const y = end[1] - center[1];\n      internalAngle = Math.atan2(y, x);\n    }\n    makeRegular(\n      /** @type {Polygon} */ (geometry),\n      center,\n      radius,\n      internalAngle\n    );\n\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n    return geometry;\n  };\n}\n\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\nexport function createBox() {\n  return function (coordinates, geometry, projection) {\n    const extent = boundingExtent(\n      /** @type {LineCoordType} */ ([\n        coordinates[0],\n        coordinates[coordinates.length - 1],\n      ]).map(function (coordinate) {\n        return fromUserCoordinate(coordinate, projection);\n      })\n    );\n    const boxCoordinates = [\n      [\n        getBottomLeft(extent),\n        getBottomRight(extent),\n        getTopRight(extent),\n        getTopLeft(extent),\n        getBottomLeft(extent),\n      ],\n    ];\n    if (geometry) {\n      geometry.setCoordinates(boxCoordinates);\n    } else {\n      geometry = new Polygon(boxCoordinates);\n    }\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n    return geometry;\n  };\n}\n\n/**\n * Get the drawing mode.  The mode for multi-part geometries is the same as for\n * their single-part cousins.\n * @param {import(\"../geom/Geometry.js\").Type} type Geometry type.\n * @return {Mode} Drawing mode.\n */\nfunction getMode(type) {\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n      return 'Point';\n    case 'LineString':\n    case 'MultiLineString':\n      return 'LineString';\n    case 'Polygon':\n    case 'MultiPolygon':\n      return 'Polygon';\n    case 'Circle':\n      return 'Circle';\n    default:\n      throw new Error('Invalid type: ' + type);\n  }\n}\n\nexport default Draw;\n", "import d from \"./node_modules/ol/interaction/Draw.js\";export default d;\nexport * from \"./node_modules/ol/interaction/Draw.js\""],
  "mappings": "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",
  "names": ["squaredDistance", "Vector_default", "squaredDistance"]
}
